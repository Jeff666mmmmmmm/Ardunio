#include <Arduino.h>
#include <RPC.h>

// ==============================

// Ardunio Info

// ==============================

// Is script error paused
bool scriptErrorPaused = false;

// Is script delayed and waiting for input
bool scriptWait = false;

// Last sending out of data in miliseconds
int lastDataSend = 0;

// Last Receive data in miliseconds
int lastDataReceive = 0;

// Min/Max step delay
const float minStepDelay = 2.5;
const int maxStepDelay = 8;

// Direct color indicators pins

const int goodLight = 51;
const int dataLight = 52;
const int errorLight = 53;

// ==============================

// X H-bridge pins
const int IN1X = 25;
const int IN2X = 27;
const int IN3X = 29;
const int IN4X = 31;

// X motor enable pin
const int ENABLE_PINX = 23;

// PressureLeaver activated read at pos 0
const int PressureLever_ReadX = 35;

// X step delay live in milliseconds
int stepDelayX = 5;

// X last step recorded
int lastStepX = 0;

// X max step distance
const int maxXStep = 100;

// X Posiotion from 0
volatile int motorStepPositionX = 0;
volatile int motorStepCompleationX = 0;

volatile int motorUptimeX = 0;    // Time the motor is running (milliseconds)
volatile int motorDowntimeX = 0;  // Time the motor is stopped (milliseconds)
unsigned long lastMilisecX = 0;   // Store last time check

// ==============================

// Z H-bridge pins
const int IN1Z = 24;
const int IN2Z = 26;
const int IN3Z = 28;
const int IN4Z = 30;

// Z motor enable pin
const int ENABLE_PINZ = 22;

// PressureLeaver activated read at pos 0
const int PressureLever_ReadZ = 34;

// Z step delay live in milliseconds
int stepDelayZ = 5;

// Z last step recorded
int lastStepZ = 0;

// Z max step distance
const int maxZStep = 100;

// Z Posiotion from 0
volatile int motorStepPositionZ = 0;
volatile int motorStepCompleationZ = 0;

volatile int motorUptimeZ = 0;    // Time the motor is running (milliseconds)
volatile int motorDowntimeZ = 0;  // Time the motor is stopped (milliseconds)
unsigned long lastMilisecZ = 0;   // Store last time check

// ==============================

// Stepper motor sequence for 4-step drive
const int steps[4][4] = {
  { 1, 0, 1, 0 },  // Step 1
  { 0, 1, 1, 0 },  // Step 2
  { 0, 1, 0, 1 },  // Step 3
  { 1, 0, 0, 1 }   // Step 4
};

// ==============================

// Data to run immediately
String commandNow = "";

// Save data from server to execute later in order

// Define the number of executable commands
const int numCommands = 12;

// Create an array of Strings to hold your commands
String commands[numCommands];

// Last executing info
int lastCompleateCommandStringExecution = -1;
int lastCompleateCommandExecution = -1;

// Next Executing Info
int currentCommandNumber = 1;
int currentCommandStringExecution = 0;
int currentCommandExecution = 0;

// String to send out to cloud
String msgForAttemptSendOverSerial = "Running";

// ==============================

// Function to energize X stepper motor coils
bool stepMotorX(int step, bool ignoreBounds) {

  if (scriptErrorPaused) {
    return false;
  }

  // Direction
  int direction = (step - lastStepX + 4) % 4;

  // Ensure it is within bounds and then update position
  if (direction == 1 && (motorStepPositionX + 1 <= maxXStep || ignoreBounds)) {
    motorStepPositionX++;
  } else if (direction == 3 && (0 > motorStepPositionX - 1 || ignoreBounds)) {
    motorStepPositionX--;
  } else {
    // Out of bounds
    return false;
  }

  // Move physical motor
  digitalWrite(ENABLE_PINX, HIGH);
  digitalWrite(IN1X, steps[step][0]);
  digitalWrite(IN2X, steps[step][1]);
  digitalWrite(IN3X, steps[step][2]);
  digitalWrite(IN4X, steps[step][3]);
  digitalWrite(ENABLE_PINX, LOW);

  // Last X move
  lastStepX = step;
  // Add step move
  motorStepCompleationX++;

  // Correctly functioned
  return true;
}

void stepMotorXForward(bool ignoreBounds) {
  int nextStep = (lastStepX + 1) % 4;
  stepMotorX(nextStep, ignoreBounds);
}

void stepMotorXBackward(bool ignoreBounds) {
  int nextStep = (lastStepX + 3) % 4;
  stepMotorX(nextStep, ignoreBounds);
}

// Function to energize Z stepper motor coils
bool stepMotorZ(int step, bool ignoreBounds) {

  if (scriptErrorPaused) {
    return false;
  }

  // Direction
  int direction = (step - lastStepZ + 4) % 4;

  // Ensure it is within bounds and then update position
  if (direction == 1 && (motorStepPositionZ + 1 <= maxZStep || ignoreBounds)) {
    motorStepPositionZ++;
  } else if (direction == 3 && (0 > motorStepPositionZ - 1 || ignoreBounds)) {
    motorStepPositionZ--;
  } else {
    // Out of bounds
    return false;
  }

  // Move physical motor
  digitalWrite(ENABLE_PINZ, HIGH);
  digitalWrite(IN1Z, steps[step][0]);
  digitalWrite(IN2Z, steps[step][1]);
  digitalWrite(IN3Z, steps[step][2]);
  digitalWrite(IN4Z, steps[step][3]);
  digitalWrite(ENABLE_PINZ, LOW);

  // Last Z move
  lastStepZ = step;
  // Add step move
  motorStepCompleationZ++;

  // Correctly functioned
  return true;
}

void stepMotorZForward(bool ignoreBounds) {
  int nextStep = (lastStepZ + 1) % 4;
  stepMotorZ(nextStep, ignoreBounds);
}

void stepMotorZBackward(bool ignoreBounds) {
  int nextStep = (lastStepZ + 3) % 4;
  stepMotorZ(nextStep, ignoreBounds);
}

// Hold X motor
void stepMotorXHold(bool run) {
  unsigned long currentMillis = millis();  // Get the current time

  // Update uptime or downtime based on the motor state
  if (run) {
    motorUptimeX += currentMillis - lastMilisecX;  // Increment uptime
    digitalWrite(ENABLE_PINX, HIGH);               // Turn motor on
  } else {
    motorDowntimeX += currentMillis - lastMilisecX;  // Increment downtime
    digitalWrite(ENABLE_PINX, LOW);                  // Turn motor off
  }

  // Update lastMillis to the current time
  lastMilisecX = currentMillis;
}

// Hold Z motor
void stepMotorZHold(bool run) {
  unsigned long currentMillis = millis();  // Get the current time

  // Update uptime or downtime based on the motor state
  if (run) {
    motorUptimeZ += currentMillis - lastMilisecZ;  // Increment uptime
    digitalWrite(ENABLE_PINZ, HIGH);               // Turn motor on
  } else {
    motorDowntimeZ += currentMillis - lastMilisecZ;  // Increment downtime
    digitalWrite(ENABLE_PINZ, LOW);                  // Turn motor off
  }

  // Update lastMillis to the current time
  lastMilisecZ = currentMillis;
}

// Hold motor positions with force
void holdMotorPositions() {
  stepMotorXHold(true);
  stepMotorZHold(true);
}

// Set All Motor Positions to 0
void homeStepperMotorsPositions() {

  // Motor Z Homing Routine
  stepDelayZ = 4.5;
  int motorHomeCompleationZ = 0;
  int stepsToLeverZ = 0;
  int stepsFromLeverZ = 0;
  int stepsReturnLeverZ = 0;

  // Step to until lever is hit (HIGH)
  for (int i = 0; i < 5000; i++) {
    stepMotorZForward(true);
    delay(stepDelayZ);

    // Is motor touched switch
    if (digitalRead(PressureLever_ReadZ) == HIGH) {
      motorHomeCompleationZ += 1;
      stepsToLeverZ = i;
      stepDelayZ = 6;

      // Step until lever is released (LOW)
      delay(500);
      for (int j = 1500; j > 0; j--) {
        stepMotorZBackward(true);
        delay(stepDelayZ);

        // Is motor backed away from switch
        if (digitalRead(PressureLever_ReadZ) == LOW) {
          motorHomeCompleationZ += 1;
          stepsFromLeverZ = j;

          // Step to until lever is hit again (HIGH)
          delay(500);
          for (int k = 0; k < 1500; k++) {
            stepMotorZForward(true);
            delay(stepDelayZ);

            // Is motor back onto the switch
            if (digitalRead(PressureLever_ReadZ) == HIGH) {
              motorHomeCompleationZ += 1;
              stepsReturnLeverZ = k;
              motorStepPositionZ = 0;
              break;
            }
          }
          break;
        }
      }
      break;
    }
  }

  lastStepZ = 0;

  // Check if motor home worked
  if (motorHomeCompleationZ != 3) {

    msgForAttemptSendOverSerial = "ERROR HomMotor Z(" + String(stepsToLeverZ) + "/" + String(stepsFromLeverZ) + "/" + String(stepsFromLeverZ) + ")";
    scriptErrorPaused = true;
    digitalWrite(errorLight, HIGH);
  } else {
    msgForAttemptSendOverSerial = "Success HomMotor Z(" + String(stepsToLeverZ) + "/" + String(stepsFromLeverZ) + "/" + String(stepsFromLeverZ) + ")";
  }
}

// Execute indviual command
bool executeCommand(String givenString) {

  // Task of command
  char task = givenString[0];

  // info for task to be executed, if any
  String taskInfo = givenString.substring(1);

  // pause script due to error
  if (task == 'A') {
    digitalWrite(goodLight, HIGH);
    delay(200);
    digitalWrite(goodLight, LOW);
    scriptErrorPaused = true;
    digitalWrite(errorLight, HIGH);
    return true;
  }
  // unpasue script due to error
  if (task == 'B') {
    digitalWrite(goodLight, HIGH);
    delay(200);
    digitalWrite(goodLight, LOW);
    scriptErrorPaused = false;
    digitalWrite(errorLight, LOW);
    return true;
  }
  // put script into wait mode
  if (task == 'C') {
    digitalWrite(goodLight, HIGH);
    delay(200);
    digitalWrite(goodLight, LOW);
    scriptWait = true;
    return true;
  }
  // remove script from wait mode
  if (task == 'D') {
    digitalWrite(goodLight, HIGH);
    delay(200);
    digitalWrite(goodLight, LOW);
    scriptWait = false;
    return true;
  }
  // step motor x forward
  if (task == 'E') {
    stepMotorXForward(false);
    return true;
  }
  // step motor x backward
  if (task == 'F') {
    stepMotorXBackward(false);
    return true;
  }
  // step motor z forward
  if (task == 'G') {
    stepMotorZForward(false);
    return true;
  }
  // step motor z backward
  if (task == 'H') {
    stepMotorZBackward(false);
    return true;
  }
  // step motor x for steps unknown
  if (task == 'I') {

    // Get varibles for loop
    float tempdelay = (taskInfo[0] - '0') + (taskInfo[1] - '0') * 0.1;
    int steps = atoi(taskInfo.substring(2).c_str());

    while (steps != 0) {
      // move steps number one step toward zero
      steps += (steps > 0 ? -1 : +1);

      if (steps >= 0) {
        stepMotorXForward(false);
      } else {
        stepMotorXBackward(false);
      }

      delay(tempdelay);
    }
    return true;
  }
  // step motor z for steps unknown
  if (task == 'J') {
    // Get varibles for loop
    float tempdelay = (taskInfo[0] - '0') + (taskInfo[1] - '0') * 0.1;
    int steps = atoi(taskInfo.substring(2).c_str());

    while (steps != 0) {
      // move steps number one step toward zero
      steps += (steps > 0 ? -1 : +1);

      if (steps >= 0) {
        stepMotorZForward(false);
      } else {
        stepMotorZBackward(false);
      }

      delay(tempdelay);
    }
    return true;
  }
  // hold all motor positions with force
  if (task == 'K') {
    holdMotorPositions();
    return true;
  }
  // Move motor X to specific step
  if (task == 'L') {
    // Get varibles for loop
    float tempdelay = (taskInfo[0] - '0') + (taskInfo[1] - '0') * 0.1;
    int StepPosition = atoi(taskInfo.substring(2).c_str());

    if (StepPosition > 0 && StepPosition <= maxXStep) {

      // When motor not at end step
      while (motorStepPositionX != StepPosition) {

        // Move motor closer to end step
        if (motorStepPositionX >= 0) {
          stepMotorXForward(false);
        } else {
          stepMotorXBackward(false);
        }

        delay(tempdelay);
      }
      return true;

    } else {
      msgForAttemptSendOverSerial = "ERROR motor X OUT OF BOUNDS (" + String(StepPosition) + ") max (" + String(maxXStep) + ")";
      return false;
    }
  }
  // Move motor Z to specific step
  if (task == 'M') {
    // Get varibles for loop
    float tempdelay = (taskInfo[0] - '0') + (taskInfo[1] - '0') * 0.1;
    int StepPosition = atoi(taskInfo.substring(2).c_str());

    if (StepPosition > 0 && StepPosition <= maxZStep) {

      // When motor not at end step
      while (motorStepPositionZ != StepPosition) {

        // Move motor closer to end step
        if (motorStepPositionZ >= 0) {
          stepMotorZForward(false);
        } else {
          stepMotorZBackward(false);
        }

        delay(tempdelay);
      }
      return true;

    } else {
      msgForAttemptSendOverSerial = "ERROR motor Z OUT OF BOUNDS (" + String(StepPosition) + ") max (" + String(maxZStep) + ")";
      return false;
    }
  }
  // Ping back to server
  if (task == 'N') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  // move X and Z motor
  if (task == 'O') {
    // fill in later
    return true;
  }
  // Rotate Y motor
  if (task == 'P') {
    // fill in later
    return true;
  }
  // Move up and down Y motor
  if (task == 'Q') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'R') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'S') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'T') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'U') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'W') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'X') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'Y') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
  if (task == 'Z') {
    msgForAttemptSendOverSerial = "Ping (" + String(millis()) + ")";
    return true;
  }
}

// Able to execute next command in a string of commands
String getNextSection(String input) {
  int sectionNumber = 1;
  int start = 0;
  int end = input.indexOf(';');

  while (end != -1) {
    if (sectionNumber == lastCompleateCommandExecution + 1) {
      return input.substring(start, end);
    }
    sectionNumber++;
    start = end + 1;
    end = input.indexOf(';', start);
  }

  return "";
}

// Execute saved commands
void runCommands() {

  String input = commands[currentCommandStringExecution];
  String nextCommand = getNextSection(input);

  // If next command in string
  if (nextCommand) {
    // Run command, if succcess continue
    if (executeCommand(nextCommand) == true) {
      lastCompleateCommandStringExecution = currentCommandStringExecution;
      lastCompleateCommandExecution = currentCommandExecution;
      currentCommandExecution += 1;
    } else {
      scriptErrorPaused = true;
      digitalWrite(errorLight, HIGH);
    }
  } else {

    // Clear last string we compleated and executed
    commands[currentCommandStringExecution - 1] = "";
    for (int i = 0; i < numCommands; i++) {
      if (commands[i].length() == 0) continue;  // Skip empty strings

      int semicolonIndex = commands[i].indexOf(';');
      if (semicolonIndex == -1) continue;  // Skip malformed strings

      String numberPart = commands[i].substring(0, semicolonIndex);
      int commandNum = numberPart.toInt();

      // New data found, set up for execution
      if (commandNum == currentCommandNumber + 1) {

        currentCommandStringExecution = i;
        currentCommandExecution = 0;
        currentCommandNumber += 1;
      }
    }
  }
}

// Send bulk data
void sendData() {
  if (millis() > lastDataSend + 6000) {
    Serial1.println("U" + String(!scriptErrorPaused) + ";E;E;" + String(stepDelayZ) + ";");

    lastDataSend = millis();
  }
}

// Serial to arudnio wifi
void checkCommunication() {

  // Alert sending ardunio
  Serial1.println("AAreadAA");

  // Wait briefly for a response
  unsigned long startWait = millis();
  while (!Serial1.available() && millis() - startWait < 50) {
    delay(1);
  }

  if (Serial1.available()) {
    String recivedMessage = Serial1.readStringUntil('\n');  // Read incoming message
    lastDataReceive = millis();

    digitalWrite(dataLight, HIGH);
    delay(200);
    digitalWrite(dataLight, LOW);

    // Set up script to run new message immediately
    if (recivedMessage.length() > 0 && recivedMessage[0] == 'I') {

      // Cut off protocal data
      recivedMessage = recivedMessage.substring(1);

      // Run command, if succcess continue
      if (executeCommand(recivedMessage) == false) {
        scriptErrorPaused = true;
        digitalWrite(errorLight, HIGH);
      }

      // Save data to run later
    } else if (recivedMessage.length() > 0 && recivedMessage[0] == 'S') {

      // Cut off protocal data
      recivedMessage = recivedMessage.substring(1);

      // Loop to find empty slot to save data
      for (int i = 0; i < numCommands; i++) {
        // Check if the current command is empty
        if (commands[i].length() == 0) {
          commands[i] = recivedMessage;
          recivedMessage = "";
          break;
        }
      }

      if (recivedMessage.length() > 1) {
        msgForAttemptSendOverSerial = "ERROR command storage full";
      }
    }

    recivedMessage = recivedMessage.substring(1);  // Ignore first character
  }

  // 2. If no incoming message, send message if "msgForAttemptSendOverSerial" is not empty
  if (msgForAttemptSendOverSerial.length() > 0) {

    digitalWrite(dataLight, HIGH);
    delay(200);
    digitalWrite(dataLight, LOW);

    Serial1.println("O" + msgForAttemptSendOverSerial);  // Send the message
    msgForAttemptSendOverSerial = "";                    // Clear the message after sending
    lastDataSend = millis();
  } else {

    sendData();  // Attempt to update ardunio cloud (send data to wifi ardunio)
  }
}

// Set up script
void setup() {

  // Set control X pins as outputs
  pinMode(IN1X, OUTPUT);
  pinMode(IN2X, OUTPUT);
  pinMode(IN3X, OUTPUT);
  pinMode(IN4X, OUTPUT);
  pinMode(ENABLE_PINX, OUTPUT);
  pinMode(PressureLever_ReadX, INPUT);

  // ==============================

  // Set control Z pins as outputs
  pinMode(IN1Z, OUTPUT);
  pinMode(IN2Z, OUTPUT);
  pinMode(IN3Z, OUTPUT);
  pinMode(IN4Z, OUTPUT);
  pinMode(ENABLE_PINZ, OUTPUT);
  pinMode(PressureLever_ReadZ, INPUT);

  // ==============================

  // Initialize Serial1 (TX1/RX1) at 9600 baud
  Serial1.begin(9600);

  // Set light pins as outputs
  pinMode(goodLight, OUTPUT);
  pinMode(dataLight, OUTPUT);
  pinMode(errorLight, OUTPUT);

  // Find and home motor positions
  homeStepperMotorsPositions();
}

// Ongoing loop
void loop() {

  checkCommunication();

  if (scriptErrorPaused || scriptWait) {
  } else {
    runCommands();
  }
}
