/* 
  Sketch generated by the Arduino IoT Cloud Thing "R4WIFIF_code"
  https://create.arduino.cc/cloud/things/a160e85f-ef98-4302-a052-bea6dae573a2 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String directToArdunio;
  String messageToArdunio;
  String messageToServer;
  CloudColor pileColor;
  float lastRPos;
  float lastXPos;
  float lastYPos;
  float lastZPos;
  int compleation;
  int exeSpeed;
  int pilePerMinute;
  int watchMotor;
  bool enabledSteppers;
  bool status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
const int activityLedPin = 2;

bool waitForReceiverReady(unsigned long timeoutMs = 2000) {
  unsigned long start = millis();
  while (millis() - start < timeoutMs) {
    if (Serial1.available()) {
      String msg = Serial1.readStringUntil('\n');
      if (msg == "AAreadAA") return true;
    }
    // give the CPU a breather
    delay(1);
  }
  return false;  // timed out
}


void setup() {
  // External pin for debugging
  pinMode(activityLedPin, OUTPUT);
  // Wifi off by default
  digitalWrite(activityLedPin, HIGH);
  
  delay(1500);

  Serial.begin(9600);
Serial1.begin(9600); 
  Serial.println("connected");
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();

  // 1) If disconnected, force LED on and skip everything else
  if (! ArduinoCloud.connected()) {
    digitalWrite(activityLedPin, HIGH);
    return;  
  }



  // 2) At this point you know weâ€™re connected: turn LED off by default
  digitalWrite(activityLedPin, LOW);

    Serial1.println("AAreadAA");

  // 2) Wait for up to 70 ms
  unsigned long t0 = millis();
  while (!Serial1.available() && millis() - t0 < 70) { delay(1); }


  // 3) Now handle any incoming Serial1 messages, blinking only when connected
  if (Serial1.available()) {
    String recivedMessage = Serial1.readStringUntil('\n');
          digitalWrite(activityLedPin, HIGH);
      delay(200);
      digitalWrite(activityLedPin, LOW);

    if (recivedMessage == "AAreadAA") {
      Serial1.println("Af");

    }else {
       if (recivedMessage[0] == 'O'){
      messageToServer = recivedMessage.substring(1);
    }else{
      if (recivedMessage[0] == 'U') {

    recivedMessage = recivedMessage.substring(1);  // Ignore first character

    int sectionCount = 0;
    int startIndex = 0;
    int endIndex = recivedMessage.indexOf(';');

    while (endIndex != -1) {
        sectionCount++;

        String temp = recivedMessage.substring(startIndex, endIndex);

        // Handle the section based on its order
        if (temp.length() != 0 && temp.charAt(0) != 'E') {

                if (sectionCount == 1) {
            status = temp.toInt();
        }
                if (sectionCount == 2) {
            enabledSteppers = temp.toInt();
        }
                if (sectionCount == 3) {
            pilePerMinute = temp.toInt();
        }
                if (sectionCount == 4) {
           exeSpeed = temp.toInt();
        }
                if (sectionCount == 5) {
           compleation = temp.toInt();
        }
                if (sectionCount == 6) {
           lastZPos = temp.toInt();
        }
                if (sectionCount == 7) {
          status = temp.toInt();
        }
                if (sectionCount == 8) {
          status = temp.toInt();
        }
                if (sectionCount == 9) {
          status = temp.toInt();
        }
                if (sectionCount == 10) {
          status = temp.toInt();
        }

        startIndex = endIndex + 1;
        endIndex = recivedMessage.indexOf(';', startIndex);
             }
          }
      }
}
    }
  }
}


// Message from cloud to ardunio
void onDirectToArdunioChange()  {
  waitForReceiverReady();
  Serial1.println(directToArdunio);
       digitalWrite(activityLedPin, HIGH);
    delay(200);
       digitalWrite(activityLedPin, LOW);
}
// Message from server to ardunio
void onMessageToArdunioChange()  {
  waitForReceiverReady();
  Serial1.println(messageToArdunio);
       digitalWrite(activityLedPin, HIGH);
    delay(200);
       digitalWrite(activityLedPin, LOW);
}
/*
  Since MessageToServer is READ_WRITE variable, onMessageToServerChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMessageToServerChange()  {
  // Add your code here to act upon MessageToServer change
}
/*
  Since PileColor is READ_WRITE variable, onPileColorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPileColorChange()  {
  // Add your code here to act upon PileColor change
}
/*
  Since LastRPos is READ_WRITE variable, onLastRPosChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLastRPosChange()  {
  // Add your code here to act upon LastRPos change
}
/*
  Since LastXPos is READ_WRITE variable, onLastXPosChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLastXPosChange()  {
  // Add your code here to act upon LastXPos change
}
/*
  Since LastYPos is READ_WRITE variable, onLastYPosChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLastYPosChange()  {
  // Add your code here to act upon LastYPos change
}
/*
  Since LastZPos is READ_WRITE variable, onLastZPosChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLastZPosChange()  {
  // Add your code here to act upon LastZPos change
}
/*
  Since Compleation is READ_WRITE variable, onCompleationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCompleationChange()  {
  // Add your code here to act upon Compleation change
}
/*
  Since ExeSpeed is READ_WRITE variable, onExeSpeedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onExeSpeedChange()  {
  // Add your code here to act upon ExeSpeed change
}
/*
  Since PilePerMinute is READ_WRITE variable, onPilePerMinuteChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPilePerMinuteChange()  {
  // Add your code here to act upon PilePerMinute change
}
/*
  Since EnabledSteppers is READ_WRITE variable, onEnabledSteppersChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onEnabledSteppersChange()  {
  // Add your code here to act upon EnabledSteppers change
}
/*
  Since Status is READ_WRITE variable, onStatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onStatusChange()  {
  // Add your code here to act upon Status change
}

/*
  Since WatchMotor is READ_WRITE variable, onWatchMotorChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWatchMotorChange()  {
  // Add your code here to act upon WatchMotor change
}
